// Code generated by go-swagger; DO NOT EDIT.

package dolar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCurrencyPlatformsHandlerFunc turns a function with the right signature into a get currency platforms handler
type GetCurrencyPlatformsHandlerFunc func(GetCurrencyPlatformsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCurrencyPlatformsHandlerFunc) Handle(params GetCurrencyPlatformsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCurrencyPlatformsHandler interface for that can handle valid get currency platforms params
type GetCurrencyPlatformsHandler interface {
	Handle(GetCurrencyPlatformsParams, interface{}) middleware.Responder
}

// NewGetCurrencyPlatforms creates a new http.Handler for the get currency platforms operation
func NewGetCurrencyPlatforms(ctx *middleware.Context, handler GetCurrencyPlatformsHandler) *GetCurrencyPlatforms {
	return &GetCurrencyPlatforms{Context: ctx, Handler: handler}
}

/*
	GetCurrencyPlatforms swagger:route GET /dolar/{moneda} Dolar getCurrencyPlatforms

Retorna la lista de plataformas del precio del dolar en dicha moneda
*/
type GetCurrencyPlatforms struct {
	Context *middleware.Context
	Handler GetCurrencyPlatformsHandler
}

func (o *GetCurrencyPlatforms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCurrencyPlatformsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
